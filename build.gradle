plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.3.RELEASE'
  id 'org.springframework.boot' version '1.5.6.RELEASE'
  id 'org.owasp.dependencycheck' version '1.4.5.1'
  id 'com.github.ben-manes.versions' version '0.15.0'
  id 'pmd'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

checkstyle.toolVersion = '8.2'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled true
    csv.enabled false
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

def springBootVersion = '1.5.6.RELEASE'

repositories {
  jcenter()
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("ruleset.xml")
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: '1.2.1'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: '1.2.1'
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.3.4.RELEASE'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.3.4.RELEASE'
  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.4.0-RELEASE'
  compile group: 'com.microsoft.azure', name: 'azure-servicebus', version: '1.1.0'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.3'

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile(
    'org.springframework.boot:spring-boot-starter-test',
    'org.assertj:assertj-core:3.6.2',
    'com.typesafe:config:1.3.1',
    'uk.gov.service.notify:notifications-java-client:3.4.0-RELEASE',
    'org.awaitility:awaitility:3.0.0',
  )
}

task functionalTest(type: Test) {
  description = "Runs Functional Tests"
  testClassesDir sourceSets.functionalTest.output.classesDir
  setClasspath sourceSets.functionalTest.runtimeClasspath
}

jar {
  baseName 'private-beta-invitation-service'
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.7.RELEASE'
  id 'org.springframework.boot' version '2.1.4.RELEASE' // remove tomcat version force below when updating spring boot version
  id 'org.owasp.dependencycheck' version '5.1.0'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'org.sonarqube' version '2.6.2'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

checkstyle.toolVersion = '8.18'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
}

task smoke(type: Test) {
  description = "Runs smoke tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  setClasspath sourceSets.functionalTest.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.pbis.categories.SmokeTests'
  }

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task functional(type: Test) {
  description = "Runs functional tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  setClasspath sourceSets.functionalTest.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.pbis.categories.FunctionalTests'
  }

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task integration(type: Test) {
  description = "Runs integration tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  setClasspath sourceSets.functionalTest.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.pbis.categories.IntegrationTests'
  }

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

jacocoTestReport {
// seems the integration tests are not run at the moment??  
//  executionData(test, integration)
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Private Beta Invitation Service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:private-beta-invitation-service"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  // until new projects get to jcenter
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  jcenter()
}

pmd {
  toolVersion = "6.11.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("ruleset.xml")
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit        : '5.3.2',
  reformLogging: '4.0.1',
  springBoot   : springBoot.class.package.implementationVersion,
  hystrix      : '2.1.0.RELEASE',
  notifications: "3.4.0-RELEASE",
  powermock    : "2.0.0"
]

dependencyManagement {
  dependencies {
    // CVE-2019-0232 - command line injections on windows - fixed on spring boot master but not released
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.19') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
  }
}

configurations.all {
  resolutionStrategy {  
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion '2.9.9'
      }
    }
  }
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.reformLogging

  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.notifications

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.hystrix
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix-dashboard', version: versions.hystrix

  compile group: 'com.microsoft.azure', name: 'azure-servicebus', version: '1.2.15'

  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude group: 'com.vaadin.external.google', module: "android-json"
  }

  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.12.2'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: versions.powermock
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: versions.powermock

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile(
    'org.springframework.boot:spring-boot-starter-test',
    'org.assertj:assertj-core:3.12.2',
    'com.typesafe:config:1.3.2',
    "uk.gov.service.notify:notifications-java-client:${versions.notifications}",
    'org.awaitility:awaitility:3.0.0',
  )
}

test {
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

mainClassName = 'uk.gov.hmcts.reform.pbis.Application'

bootJar {
  archiveName 'private-beta-invitation-service-all.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

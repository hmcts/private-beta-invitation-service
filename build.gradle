plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.5.RELEASE'
  id 'org.springframework.boot' version '1.5.14.RELEASE'
  id 'org.owasp.dependencycheck' version '3.2.1'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.6.1'
  id 'pmd'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

checkstyle.toolVersion = '8.8'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {
  // until new projects get to jcenter
  maven {
    url  "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  jcenter()
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("ruleset.xml")
}

def versions = [
  springBoot: '1.5.14.RELEASE',
  logging: '2.0.2',
  hystrix: '1.4.5.RELEASE'
]

configurations {
  runtime.exclude group: 'com.microsoft.azure', module: 'applicationinsights-agent'
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.logging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.logging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.logging
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'

  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.4.0-RELEASE'

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: versions.hystrix
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: versions.hystrix

  compile group: 'com.microsoft.azure', name: 'azure-servicebus', version: '1.2.6'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.3'

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile(
    'org.springframework.boot:spring-boot-starter-test',
    'org.assertj:assertj-core:3.9.0',
    'com.typesafe:config:1.3.2',
    'uk.gov.service.notify:notifications-java-client:3.8.0-RELEASE',
    'org.awaitility:awaitility:3.0.0',
  )
}

test {
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs end-to-end tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  setClasspath sourceSets.functionalTest.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.pbis.categories.EndToEndTests'
  }

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task integrationTest(type: Test) {
  description = "Runs integration tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  setClasspath sourceSets.functionalTest.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.pbis.categories.IntegrationTests'
  }

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

project.tasks['sonarqube'].dependsOn test
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Private Beta Invitation Service"
    property "sonar.jacoco.reportPaths", [
      "${project.buildDir}/jacoco/test.exec",
      "${project.buildDir}/jacoco/functionalTest.exec"
    ]
  }
}

jar {
  archiveName 'private-beta-invitation-service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
